// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

model User {
  id                      String               @id @default(uuid()) @db.Uuid
  email                   String               @unique
  password                String
  created_at              DateTime             @default(now())
  updated_at              DateTime             @updatedAt
  first_name              String
  last_name               String
  role                    String
  avatar                  String?
  status                  UserStatus           @default(PENDING)
  phone                   String?
  address                 String?
  organisation_id         String?              @db.Uuid
  organisation            Organisation?        @relation("UserOrganisation", fields: [organisation_id], references: [id])
  last_login              DateTime?
  created_by              String?              @db.Uuid
  countries_created       Country[]
  organisation_created    Organisation[]       @relation("CreatedByUser")
  Integration             Integration[]
  UserActivity            UserActivity[]
  role_id                 String?              @db.Uuid
  user_role               Role?                @relation("UserRole", fields: [role_id], references: [id])
  created_by_roles        Role[]               @relation("RolesCreatedByUser")
  branch                  Branch?              @relation(fields: [branch_id], references: [id])
  branch_id               String?              @db.Uuid
  created_exchange_rates  ExchangeRate[]       @relation("CreatedByUser")
  approved_exchange_rates ExchangeRate[]       @relation("ApprovedByUser")
  tills                   Till[]               @relation("CurrentTellerUser")
  transactions            Transaction[]
  corridors               Corridor[]
  charges                 Charge[]
  beneficiaries           Beneficiary[]
  customers               Customer[]
  branches                Branch[]             @relation("CreatedByUser")
  transaction_channels    TransactionChannel[]
  user_tills              UserTill[]           @relation("UserTill")
  gl_accounts             GlAccount[]
  gl_transactions         GLTransaction[]
  gl_entries              GlEntry[]
  user_tills_closed_by    UserTill[]           @relation("UserTillClosedByUser")
  created_tills           Till[]               @relation("CreatedByUser")
  balance_histories       BalanceHistory[]
  org_balances            OrgBalance[]
  bank_accounts           BankAccount[]
  transaction_parties     TransactionParty[]
  charges_payments        ChargesPayment[]
  vaults                  Vault[]

  @@index([email])
  @@index([id])
  @@index([first_name])
  @@index([last_name])
  @@index([role])
  @@index([status])
  @@index([last_login])
  @@index([created_at])
  @@index([updated_at])
  @@index([avatar])
  @@index([password])
  @@index([created_by])
  @@index([role_id])
  @@map("users")
}

model Currency {
  id                    String           @id @default(uuid()) @db.Uuid
  currency_name         String
  currency_code         String
  currency_symbol       String
  created_at            DateTime         @default(now())
  created_by            String?          @db.Uuid
  updated_at            DateTime         @updatedAt
  symbol_native         String?
  decimal_digits        Int?
  rounding              Float?
  name_plural           String?
  organisations         Organisation[]
  charges               Charge[]
  corridors             Corridor[]       @relation("BaseCurrency")
  customers             Customer[]
  inbound_transactions  Transaction[]    @relation("OriginCurrency")
  outbound_transactions Transaction[]    @relation("DestCurrency")
  from_exchange_rates   ExchangeRate[]   @relation("FromCurrency")
  to_exchange_rates     ExchangeRate[]   @relation("ToCurrency")
  tills                 Till[]
  vaults                Vault[]
  gl_accounts           GlAccount[]
  gl_transactions       GLTransaction[]
  org_balances          OrgBalance[]
  balance_histories     BalanceHistory[]
  bank_accounts         BankAccount[]
  charges_payments      ChargesPayment[]

  @@index([currency_name])
  @@index([currency_code])
  @@index([currency_symbol])
  @@index([created_at])
  @@index([updated_at])
  @@map("currencies")
}

model Country {
  id                         String             @id @default(uuid()) @db.Uuid
  name                       String
  code                       String
  created_at                 DateTime           @default(now())
  updated_at                 DateTime           @updatedAt
  organisations              Organisation[]
  created_by                 String?            @db.Uuid
  created_by_user            User?              @relation(fields: [created_by], references: [id])
  base_corridors             Corridor[]         @relation("BaseCountry")
  destination_corridors      Corridor[]         @relation("DestinationCountry")
  customers_nationality      Customer[]         @relation("CustomerNationality")
  customers_residence        Customer[]         @relation("CustomerResidenceCountry")
  customers_incorporation    Customer[]         @relation("IncorporationCountry")
  beneficiaries_nationality  Beneficiary[]      @relation("BeneficiaryNationality")
  beneficiaries_residence    Beneficiary[]      @relation("BeneficiaryResidenceCountry")
  incorporation_country      Beneficiary[]      @relation("BeneficiaryIncorporationCountry")
  origin_exchange_rates      ExchangeRate[]     @relation("OriginCountry")
  destination_exchange_rates ExchangeRate[]     @relation("DestinationCountry")
  branches                   Branch[]
  transaction_parties        TransactionParty[]
  origin_transactions        Transaction[]      @relation("OriginCountry")
  destination_transactions   Transaction[]      @relation("DestinationCountry")

  @@index([name])
  @@index([code])
  @@index([created_at])
  @@index([updated_at])
  @@map("countries")
}

enum OrganisationType {
  PARTNER
  AGENCY
  CUSTOMER
}

enum IntegrationMethod {
  INTERNAL
  EXTERNAL
}

enum OrganisationStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

model Organisation {
  id                           String              @id @default(uuid()) @db.Uuid
  name                         String
  description                  String?
  type                         OrganisationType    @default(PARTNER)
  integration_mode             IntegrationMethod   @default(INTERNAL)
  contact_person               String?
  contact_email                String?
  contact_phone                String?
  contact_address              String?
  contact_city                 String?
  contact_state                String?
  contact_zip                  String?
  status                       OrganisationStatus  @default(PENDING)
  base_currency_id             String?             @db.Uuid
  base_currency                Currency?           @relation(fields: [base_currency_id], references: [id])
  created_at                   DateTime            @default(now())
  updated_at                   DateTime            @updatedAt
  users                        User[]              @relation("UserOrganisation")
  country_id                   String?             @db.Uuid
  country                      Country?            @relation(fields: [country_id], references: [id])
  created_by                   String?             @db.Uuid
  created_by_user              User?               @relation("CreatedByUser", fields: [created_by], references: [id])
  integrations                 Integration[]       @relation("Organisation")
  user_activities              UserActivity[]
  branches                     Branch[]
  origin_charges               Charge[]            @relation("OriginOrganisation")
  destination_charges          Charge[]            @relation("DestinationOrganisation")
  customers                    Customer[]
  beneficiaries                Beneficiary[]
  origin_transactions          Transaction[]       @relation("OriginOrganisation")
  destination_transactions     Transaction[]       @relation("DestinationOrganisation")
  exchange_rates               ExchangeRate[]
  origin_corridors             Corridor[]          @relation("OriginOrganisation")
  destination_corridors        Corridor[]          @relation("DestinationOrganisation")
  vaults                       Vault[]
  gl_accounts                  GlAccount[]
  transaction_charges          TransactionCharge[]
  gl_transactions              GLTransaction[]
  tills                        Till[]
  user_tills                   UserTill[]
  origin_integrations          Integration[]       @relation("OriginOrganisation")
  base_org_balances            OrgBalance[]        @relation("BaseOrgBalance")
  dest_org_balances            OrgBalance[]        @relation("DestOrgBalance")
  bank_accounts                BankAccount[]
  transaction_parties          TransactionParty[]
  charges_payments             ChargesPayment[]    @relation("Organisation")
  destination_charges_payments ChargesPayment[]    @relation("DestinationOrganisation")

  @@index([id])
  @@index([description])
  @@index([created_at])
  @@index([updated_at])
  @@index([type])
  @@map("organisations")
}

enum IntegrationType {
  API
  WEBHOOK
  EMAIL
  SMS
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

model Integration {
  id                     String            @id @default(uuid()) @db.Uuid
  name                   String
  description            String?
  organisation_id        String?           @db.Uuid
  organisation           Organisation?     @relation("Organisation", fields: [organisation_id], references: [id])
  type                   IntegrationType
  status                 IntegrationStatus
  api_key                String?
  api_secret             String?
  endpoint_url           String?
  webhook_secret         String?
  configuration          Json?
  created_at             DateTime          @default(now())
  updated_at             DateTime          @updatedAt
  created_by             String?           @db.Uuid
  created_by_user        User?             @relation(fields: [created_by], references: [id])
  transactions           Transaction[]
  origin_organisation_id String?           @db.Uuid
  origin_organisation    Organisation?     @relation("OriginOrganisation", fields: [origin_organisation_id], references: [id])

  @@index([name])
  @@index([organisation_id])
  @@index([description])
  @@index([type])
  @@index([status])
  @@index([created_at])
  @@index([updated_at])
  @@index([created_by])
  @@map("integrations")
}

model UserActivity {
  id              String        @id @default(uuid()) @db.Uuid
  user_id         String?       @db.Uuid
  user            User?         @relation(fields: [user_id], references: [id])
  entity_type     String
  entity_id       String
  action          String
  data            Json?
  organisation_id String?       @db.Uuid
  organisation    Organisation? @relation(fields: [organisation_id], references: [id])
  changes         Json?
  ip_address      String?
  request_id      String?
  metadata        Json?
  created_at      DateTime      @default(now())

  @@index([user_id])
  @@index([entity_type])
  @@index([entity_id])
  @@index([action])
  @@index([organisation_id])
  @@index([created_at])
  @@map("user_activities")
}

model Role {
  id               String           @id @default(uuid()) @db.Uuid
  name             String
  description      String?
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  created_by       String?          @db.Uuid
  created_by_user  User?            @relation("RolesCreatedByUser", fields: [created_by], references: [id])
  users            User[]           @relation("UserRole")
  role_permissions RolePermission[]

  @@index([name])
  @@index([created_at])
  @@index([updated_at])
  @@index([created_by])
  @@map("roles")
}

model Permission {
  id               String           @id @default(uuid()) @db.Uuid
  name             String
  created_at       DateTime         @default(now())
  created_by       String?          @db.Uuid
  role_permissions RolePermission[]
  updated_at       DateTime         @updatedAt
  description      String?

  @@unique([name])
  @@index([name])
  @@map("permissions")
}

model RolePermission {
  id            String     @id @default(uuid()) @db.Uuid
  role_id       String     @db.Uuid
  permission_id String     @db.Uuid
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  updated_at    DateTime   @updatedAt
  created_at    DateTime   @default(now())
  created_by    String?    @db.Uuid

  @@unique([role_id, permission_id])
  @@index([role_id])
  @@index([permission_id])
  @@map("role_permissions")
}

model Branch {
  id              String       @id @default(uuid()) @db.Uuid
  name            String
  address         String?
  city            String?
  state           String?
  country_id      String       @db.Uuid
  country         Country      @relation(fields: [country_id], references: [id])
  zip_code        String?
  phone           String?
  email           String?
  created_at      DateTime     @default(now())
  created_by      String?      @db.Uuid
  created_by_user User?        @relation("CreatedByUser", fields: [created_by], references: [id])
  organisation_id String       @db.Uuid
  organisation    Organisation @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  users           User[]
  updated_at      DateTime     @updatedAt
  customers       Customer[]

  @@unique([name, organisation_id])
  @@index([name])
  @@index([organisation_id])
  @@map("branches")
}

model TransactionChannel {
  id                       String             @id @default(uuid()) @db.Uuid
  name                     String
  description              String
  direction                String[]
  created_at               DateTime           @default(now())
  created_by               String?            @db.Uuid
  updated_at               DateTime           @updatedAt
  origin_transactions      Transaction[]      @relation("OriginChannel")
  destination_transactions Transaction[]      @relation("DestChannel")
  created_by_user          User?              @relation(fields: [created_by], references: [id])
  transaction_parties      TransactionParty[]

  @@index([created_at])
  @@index([updated_at])
  @@index([created_by])
  @@map("transaction_channels")
}

enum CorridorStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

model Corridor {
  id                     String         @id @default(uuid()) @db.Uuid
  name                   String
  description            String
  base_country_id        String         @db.Uuid
  base_country           Country        @relation("BaseCountry", fields: [base_country_id], references: [id])
  destination_country_id String         @db.Uuid
  destination_country    Country        @relation("DestinationCountry", fields: [destination_country_id], references: [id])
  base_currency_id       String         @db.Uuid
  base_currency          Currency       @relation("BaseCurrency", fields: [base_currency_id], references: [id])
  organisation_id        String         @db.Uuid
  organisation           Organisation   @relation("DestinationOrganisation", fields: [organisation_id], references: [id])
  created_at             DateTime       @default(now())
  created_by             String?        @db.Uuid
  created_by_user        User?          @relation(fields: [created_by], references: [id])
  updated_at             DateTime       @updatedAt
  status                 CorridorStatus @default(ACTIVE)
  transactions           Transaction[]
  origin_organisation_id String?        @db.Uuid
  origin_organisation    Organisation?  @relation("OriginOrganisation", fields: [origin_organisation_id], references: [id])

  @@index([name])
  @@index([base_country_id])
  @@index([destination_country_id])
  @@index([base_currency_id])
  @@index([status])
  @@map("corridors")
}

enum ApplicationMethod {
  PERCENTAGE
  FIXED
}

enum ChargeType {
  TAX
  INTERNAL_FEE
  COMMISSION
  OTHER
}

enum ApplicableDirection {
  OUTBOUND
  INBOUND
  BOTH
}

enum ChargeStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

model Charge {
  id                           String              @id @default(uuid()) @db.Uuid
  name                         String
  description                  String
  application_method           ApplicationMethod   @default(PERCENTAGE)
  currency_id                  String?             @db.Uuid
  currency                     Currency?           @relation(fields: [currency_id], references: [id])
  type                         ChargeType
  rate                         Float
  origin_organisation_id       String?             @db.Uuid
  origin_organisation          Organisation?       @relation("OriginOrganisation", fields: [origin_organisation_id], references: [id])
  destination_organisation_id  String?             @db.Uuid
  destination_organisation     Organisation?       @relation("DestinationOrganisation", fields: [destination_organisation_id], references: [id])
  is_reversible                Boolean             @default(false)
  direction                    ApplicableDirection @default(OUTBOUND)
  origin_share_percentage      Float?
  destination_share_percentage Float?
  created_at                   DateTime            @default(now())
  created_by                   String?             @db.Uuid
  created_by_user              User?               @relation(fields: [created_by], references: [id])
  updated_at                   DateTime            @updatedAt
  status                       ChargeStatus        @default(ACTIVE)
  min_amount                   Float?
  max_amount                   Float?
  gl_accounts                  GlAccount[]
  transaction_charges          TransactionCharge[]

  @@index([name])
  @@index([currency_id])
  @@index([origin_organisation_id])
  @@index([destination_organisation_id])
  @@index([status])
  @@index([created_at])
  @@index([updated_at])
  @@map("charges")
}

enum TaxNumberType {
  PIN // Personal Identification Number
  TIN // Tax Identification Number
  SSN // Social Security Number
  KRA_PIN // Kenya Revenue Authority Personal Identification Number
  OTHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum CustomerType {
  INDIVIDUAL
  CORPORATE
  BUSINESS
}

enum IndividualIDType {
  PASSPORT
  NATIONAL_ID
  DRIVERS_LICENSE
  ALIEN_CARD
  KRA_PIN
  OTHER
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

model Customer {
  id                       String            @id @default(uuid()) @db.Uuid
  full_name                String
  date_of_birth            DateTime?
  nationality_id           String?           @db.Uuid
  nationality              Country?          @relation("CustomerNationality", fields: [nationality_id], references: [id], onDelete: SetNull)
  residence_country_id     String?           @db.Uuid
  residence_country        Country?          @relation("CustomerResidenceCountry", fields: [residence_country_id], references: [id], onDelete: SetNull)
  id_type                  IndividualIDType?
  id_number                String? // Passport or National ID
  address                  String?
  email                    String?
  phone_number             String?
  occupation_id            String?           @db.Uuid
  occupation               Occupation?       @relation(fields: [occupation_id], references: [id], onDelete: SetNull)
  registration_date        DateTime          @default(now())
  risk_rating              Float             @default(0.0)
  risk_reasons             String? // Brief explanation of risk factors
  organisation_id          String            @db.Uuid
  organisation             Organisation      @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  branch_id                String?           @db.Uuid
  branch                   Branch?           @relation(fields: [branch_id], references: [id], onDelete: Cascade)
  created_at               DateTime          @default(now())
  updated_at               DateTime          @updatedAt
  tax_number_type          TaxNumberType?
  tax_number               String?
  gender                   Gender?
  customer_type            CustomerType
  incorporation_country_id String?           @db.Uuid
  incorporation_country    Country?          @relation("IncorporationCountry", fields: [incorporation_country_id], references: [id], onDelete: SetNull)
  incoporated_date         DateTime?
  estimated_monthly_income Decimal?
  org_reg_number           String?
  current_age              Int?
  first_name               String?
  last_name                String?
  currency_id              String?           @db.Uuid
  currency                 Currency?         @relation(fields: [currency_id], references: [id], onDelete: SetNull)
  industry_id              String?           @db.Uuid
  industry                 Industry?         @relation(fields: [industry_id], references: [id], onDelete: SetNull)
  legacy_customer_id       String? // For syncing with legacy systems
  has_adverse_media        Boolean?          @default(false) // Indicates if the customer has been flagged in adverse media
  adverse_media_reason     String? // Reason for adverse media flag
  deleted_at               DateTime? // Soft delete field
  beneficiaries            Beneficiary[]
  transactions             Transaction[]     @relation("Customer")
  created_by               String?           @db.Uuid
  created_by_user          User?             @relation(fields: [created_by], references: [id])
  status                   CustomerStatus    @default(PENDING)
  gl_transactions          GLTransaction[]

  @@unique([id_type, id_number, organisation_id])
  @@index([full_name])
  @@index([id_type, id_number])
  @@index([nationality_id])
  @@index([residence_country_id])
  @@index([email])
  @@index([phone_number])
  @@index([occupation_id])
  @@index([registration_date])
  @@index([risk_rating])
  @@index([organisation_id])
  @@index([branch_id])
  @@index([tax_number_type])
  @@index([tax_number])
  @@index([gender])
  @@index([customer_type])
  @@index([incorporation_country_id])
  @@index([incoporated_date])
  @@index([status])
  @@map("customers")
}

model Occupation {
  id            String        @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  customers     Customer[]
  beneficiaries Beneficiary[]

  @@index([created_at])
  @@index([updated_at])
  @@map("occupations")
}

model Industry {
  id            String        @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  customers     Customer[]
  beneficiaries Beneficiary[]

  @@index([created_at])
  @@index([updated_at])
  @@map("industries")
}

enum OwnershipType {
  DIRECT
  INDIRECT
  CONTROL
  OTHER
}

enum RelationshipType {
  OWNER
  SHAREHOLDER
  DIRECTOR
  TRUSTEE
  PARTNER
  BENEFICIARY
  NOMINEE
  OTHER
}

model Beneficiary {
  id                        String            @id @default(uuid()) @db.Uuid
  customer_id               String            @db.Uuid
  customer                  Customer          @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  organisation_id           String            @db.Uuid
  organisation              Organisation      @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  type                      CustomerType
  risk_contribution         Float? // Weighted risk score (e.g., risk_score * ownership_percentage)
  risk_contribution_details Json? // Details of contribution (e.g., {"sanctions": 12.5, "id_verification": 4})
  name                      String
  date_of_birth             DateTime?
  nationality_id            String?           @db.Uuid
  nationality               Country?          @relation("BeneficiaryNationality", fields: [nationality_id], references: [id], onDelete: SetNull)
  residence_country_id      String?           @db.Uuid
  residence_country         Country?          @relation("BeneficiaryResidenceCountry", fields: [residence_country_id], references: [id], onDelete: SetNull)
  incorporation_country_id  String?           @db.Uuid
  incorporation_country     Country?          @relation("BeneficiaryIncorporationCountry", fields: [incorporation_country_id], references: [id], onDelete: SetNull)
  address                   String?
  id_type                   IndividualIDType?
  id_number                 String?
  tax_number_type           TaxNumberType?
  tax_number                String?
  reg_number                String?
  occupation_id             String?           @db.Uuid
  occupation                Occupation?       @relation(fields: [occupation_id], references: [id], onDelete: SetNull)
  industry_id               String?           @db.Uuid
  industry                  Industry?         @relation(fields: [industry_id], references: [id], onDelete: SetNull)
  created_at                DateTime          @default(now())
  updated_at                DateTime          @updatedAt
  deleted_at                DateTime?
  transactions              Transaction[]     @relation("Beneficiary")
  created_by                String?           @db.Uuid
  created_by_user           User?             @relation(fields: [created_by], references: [id])
  status                    CustomerStatus    @default(ACTIVE)
  email                     String?
  phone                     String?
  bank_name                 String?
  bank_address              String?
  bank_city                 String?
  bank_state                String?
  bank_zip                  String?
  bank_account_number       String?
  bank_account_name         String?

  @@unique([customer_id, organisation_id])
  @@index([customer_id])
  @@index([organisation_id])
  @@index([deleted_at])
  @@index([name])
  @@index([id_type, id_number])
  @@index([nationality_id])
  @@index([residence_country_id])
  @@index([tax_number_type])
  @@index([tax_number])
  @@index([reg_number])
  @@index([occupation_id])
  @@index([industry_id])
  @@index([email])
  @@index([phone])
  @@index([bank_name])
  @@index([bank_address])
  @@index([bank_city])
  @@index([bank_state])
  @@index([bank_zip])
  @@map("beneficiaries")
}

enum ExchangeRateStatus {
  PENDING_APPROVAL
  APPROVED
  ACTIVE
  INACTIVE
  REJECTED
}

enum ExchangeRateOperatorStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
}

model ExchangeRate {
  id                      String                     @id @default(uuid()) @db.Uuid
  name                    String?                    @db.VarChar(256)
  from_currency_id        String?                    @db.Uuid
  from_currency           Currency?                  @relation("FromCurrency", fields: [from_currency_id], references: [id])
  to_currency_id          String?                    @db.Uuid
  to_currency             Currency?                  @relation("ToCurrency", fields: [to_currency_id], references: [id])
  origin_country_id       String?                    @db.Uuid
  origin_country          Country?                   @relation("OriginCountry", fields: [origin_country_id], references: [id])
  destination_country_id  String?                    @db.Uuid
  destination_country     Country?                   @relation("DestinationCountry", fields: [destination_country_id], references: [id])
  buy_rate                Decimal                    @db.Decimal(18, 9)
  sell_rate               Decimal                    @db.Decimal(18, 9)
  exchange_rate           Decimal                    @db.Decimal(18, 9)
  min_buy_rate            Decimal?                   @db.Decimal(18, 9)
  max_buy_rate            Decimal?                   @db.Decimal(18, 9)
  min_sell_rate           Decimal?                   @db.Decimal(18, 9)
  max_sell_rate           Decimal?                   @db.Decimal(18, 9)
  min_exchange_rate       Decimal?                   @db.Decimal(18, 9)
  max_exchange_rate       Decimal?                   @db.Decimal(18, 9)
  status                  ExchangeRateStatus         @default(PENDING_APPROVAL)
  operator_status         ExchangeRateOperatorStatus @default(PENDING_APPROVAL)
  approved_by             String?                    @db.Uuid
  approved_by_user        User?                      @relation("ApprovedByUser", fields: [approved_by], references: [id])
  created_by              String?                    @db.Uuid
  created_by_user         User?                      @relation("CreatedByUser", fields: [created_by], references: [id])
  organisation_id         String?                    @db.Uuid
  organisation            Organisation?              @relation(fields: [organisation_id], references: [id])
  created_at              DateTime?                  @default(now()) @db.Timestamp(0)
  updated_at              DateTime?                  @db.Timestamp(0)
  deleted_at              DateTime?                  @db.Timestamp(0)
  internal_exchange_rates Transaction[]              @relation("InternalExchangeRates")
  external_exchange_rates Transaction[]              @relation("ExternalExchangeRates")
  date_from               DateTime?                  @default(now()) @db.Timestamp(0)
  date_to                 DateTime?                  @db.Timestamp(0)

  @@index([from_currency_id])
  @@index([to_currency_id])
  @@index([origin_country_id])
  @@index([destination_country_id])
  @@index([approved_by])
  @@index([created_by])
  @@index([organisation_id])
  @@map("exchange_rates")
}

enum TillStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

model Till {
  id                     String           @id @default(uuid()) @db.Uuid
  name                   String
  description            String
  status                 TillStatus       @default(ACTIVE)
  current_teller_user_id String?          @db.Uuid
  current_teller_user    User?            @relation("CurrentTellerUser", fields: [current_teller_user_id], references: [id])
  location               String?          @db.VarChar(256)
  vault_id               String?          @db.Uuid
  vault                  Vault?           @relation(fields: [vault_id], references: [id])
  currency_id            String?          @db.Uuid
  currency               Currency?        @relation(fields: [currency_id], references: [id])
  balance                Decimal?         @db.Decimal(22, 9)
  locked_balance         Decimal?         @db.Decimal(22, 9)
  opened_at              DateTime?
  closed_at              DateTime?
  created_at             DateTime         @default(now())
  updated_at             DateTime         @updatedAt
  transactions           Transaction[]
  user_tills             UserTill[]
  organisation_id        String?          @db.Uuid
  organisation           Organisation?    @relation(fields: [organisation_id], references: [id])
  created_by             String?          @db.Uuid
  created_by_user        User?            @relation("CreatedByUser", fields: [created_by], references: [id])
  gl_accounts            GlAccount[]
  balance_histories      BalanceHistory[]

  @@index([created_at])
  @@index([updated_at])
  @@index([status])
  @@index([current_teller_user_id])
  @@index([opened_at])
  @@index([closed_at])
  @@index([vault_id])
  @@index([currency_id])
  @@map("tills")
}

enum UserTillStatus {
  CLOSED
  OPEN
  PENDING
  BLOCKED
}

model UserTill {
  id                     String          @id @default(uuid()) @db.Uuid
  user_id                String          @db.Uuid
  user                   User            @relation("UserTill", fields: [user_id], references: [id])
  till_id                String          @db.Uuid
  till                   Till            @relation(fields: [till_id], references: [id])
  opening_balance        Decimal         @db.Decimal(22, 9)
  closing_balance        Decimal?        @db.Decimal(22, 9)
  net_transactions_total Decimal         @default(0) @db.Decimal(22, 9)
  date                   DateTime        @db.Timestamp(0)
  status                 UserTillStatus  @default(OPEN)
  gl_transactions        GLTransaction[]
  created_at             DateTime        @default(now())
  updated_at             DateTime        @updatedAt
  closed_at              DateTime?       @db.Timestamp(0)
  closed_by              String?         @db.Uuid
  closed_by_user         User?           @relation("UserTillClosedByUser", fields: [closed_by], references: [id])
  organisation_id        String?         @db.Uuid
  organisation           Organisation?   @relation(fields: [organisation_id], references: [id])

  @@index([user_id])
  @@index([till_id])
  @@map("user_tills")
}

enum Direction {
  INBOUND
  OUTBOUND
}

enum Status {
  PENDING_APPROVAL
  APPROVED
  PENDING
  FAILED
  CANCELLED
  REJECTED
  COMPLETED
  REVERSED
}

enum RemittanceStatus {
  PENDING
  FAILED
  REJECTED
  COMPLETED
}

enum RequestStatus {
  UNDER_REVIEW
  PENDING_OPERATIONS_APPROVAL
  PENDING_CUSTOMER_ACTION
  PENDING_VERIFICATION
}

model Transaction {
  id                           String              @id @default(uuid()) @db.Uuid
  transaction_no               String?             @db.VarChar(128)
  corridor_id                  String              @db.Uuid
  corridor                     Corridor?           @relation(fields: [corridor_id], references: [id])
  till_id                      String              @db.Uuid
  till                         Till?               @relation(fields: [till_id], references: [id])
  direction                    Direction
  customer_id                  String              @db.Uuid
  customer                     Customer?           @relation("Customer", fields: [customer_id], references: [id])
  origin_amount                Decimal             @db.Decimal(22, 9)
  origin_channel_id            String              @db.Uuid
  origin_channel               TransactionChannel? @relation("OriginChannel", fields: [origin_channel_id], references: [id])
  origin_currency_id           String              @db.Uuid
  origin_currency              Currency            @relation("OriginCurrency", fields: [origin_currency_id], references: [id])
  beneficiary_id               String              @db.Uuid
  beneficiary                  Beneficiary?        @relation("Beneficiary", fields: [beneficiary_id], references: [id])
  dest_amount                  Decimal             @db.Decimal(22, 9)
  dest_channel_id              String              @db.Uuid
  dest_channel                 TransactionChannel? @relation("DestChannel", fields: [dest_channel_id], references: [id])
  dest_currency_id             String              @db.Uuid
  dest_currency                Currency            @relation("DestCurrency", fields: [dest_currency_id], references: [id])
  rate                         Decimal             @db.Decimal(22, 9)
  internal_exchange_rate       Decimal?            @db.Decimal(18, 9)
  inflation                    Decimal?            @db.Decimal(18, 9)
  markup                       Decimal?            @db.Decimal(18, 9)
  purpose                      String?             @db.VarChar(256)
  funds_source                 String?             @db.VarChar(256)
  relationship                 String?             @db.VarChar(256)
  remarks                      String?             @db.VarChar(1024)
  status                       Status              @default(PENDING_APPROVAL)
  remittance_status            RemittanceStatus    @default(PENDING)
  remittance_status_details    String?             @db.VarChar(1024)
  request_status               RequestStatus       @default(UNDER_REVIEW)
  remitted_at                  DateTime?
  exchange_rate_id             String?             @db.Uuid
  exchange_rate                ExchangeRate?       @relation("InternalExchangeRates", fields: [exchange_rate_id], references: [id])
  external_exchange_rate_id    String?             @db.Uuid
  external_exchange_rate       ExchangeRate?       @relation("ExternalExchangeRates", fields: [external_exchange_rate_id], references: [id])
  created_by                   String              @db.Uuid
  created_by_user              User?               @relation(fields: [created_by], references: [id])
  created_at                   DateTime?           @default(now())
  updated_at                   DateTime?           @updatedAt
  deleted_at                   DateTime?
  received_at                  DateTime?
  amount_payable               Decimal?            @db.Decimal(22, 9)
  amount_receivable            Decimal?            @db.Decimal(22, 9)
  origin_organisation_id       String?             @db.Uuid
  origin_organisation          Organisation?       @relation("OriginOrganisation", fields: [origin_organisation_id], references: [id])
  destination_organisation_id  String?             @db.Uuid
  destination_organisation     Organisation?       @relation("DestinationOrganisation", fields: [destination_organisation_id], references: [id])
  integration_id               String?             @db.Uuid
  integration                  Integration?        @relation(fields: [integration_id], references: [id])
  total_taxes                  Decimal?            @db.Decimal(22, 9) // Sum of all taxes
  internal_charges             Decimal?            @db.Decimal(22, 9) // Internal profit charges
  commissions                  Decimal?            @db.Decimal(22, 9) // Commissions to partners/agencies
  reversal_status              String? // e.g., "reversed", "partial_reversal" for refunds
  reversal_date                DateTime? // Timestamp for reversal
  transaction_charges          TransactionCharge[]
  gl_transactions              GLTransaction[]
  balance_histories            BalanceHistory[]
  transaction_parties          TransactionParty[]
  origin_country_id            String?             @db.Uuid
  origin_country               Country?            @relation("OriginCountry", fields: [origin_country_id], references: [id])
  destination_country_id       String?             @db.Uuid
  destination_country          Country?            @relation("DestinationCountry", fields: [destination_country_id], references: [id])
  sender_trasaction_party_id   String?             @db.Uuid
  sender_trasaction_party      TransactionParty?   @relation("SenderTransactionParty", fields: [sender_trasaction_party_id], references: [id])
  receiver_trasaction_party_id String?             @db.Uuid
  receiver_trasaction_party    TransactionParty?   @relation("ReceiverTransactionParty", fields: [receiver_trasaction_party_id], references: [id])

  @@index([corridor_id])
  @@index([till_id])
  @@index([origin_channel_id])
  @@index([origin_currency_id])
  @@index([beneficiary_id])
  @@index([customer_id])
  @@index([dest_channel_id])
  @@index([dest_currency_id])
  @@index([exchange_rate_id])
  @@index([external_exchange_rate_id])
  @@index([created_by])
  @@index([origin_organisation_id])
  @@index([destination_organisation_id])
  @@index([integration_id])
  @@index([status])
  @@index([remittance_status])
  @@index([request_status])
  @@index([created_at])
  @@index([updated_at])
  @@index([deleted_at])
  @@index([received_at])
  @@index([remitted_at])
  @@index([reversal_date])
  @@map("transactions")
}

enum TransactionChargeStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  FAILED
  PAID
  REVERSED
}

model TransactionCharge {
  id                  String                  @id @default(uuid()) @db.Uuid
  transaction_id      String                  @db.Uuid
  transaction         Transaction             @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  charge_id           String                  @db.Uuid
  charge              Charge                  @relation(fields: [charge_id], references: [id], onDelete: Cascade)
  type                ChargeType
  amount              Decimal                 @db.Decimal(22, 9)
  internal_amount     Decimal?                @db.Decimal(22, 9)
  internal_percentage Decimal?                @db.Decimal(18, 9)
  external_amount     Decimal?                @db.Decimal(22, 9)
  external_percentage Decimal?                @db.Decimal(18, 9)
  rate                Decimal?                @db.Decimal(18, 9) // Percentage rate if applicable
  is_reversible       Boolean                 @default(true) // Taxes are not reversible
  description         String?                 @db.VarChar(256)
  created_at          DateTime                @default(now())
  updated_at          DateTime                @updatedAt
  status              TransactionChargeStatus @default(PENDING)
  organisation_id     String?                 @db.Uuid
  organisation        Organisation?           @relation(fields: [organisation_id], references: [id])
  ChargesPaymentItem  ChargesPaymentItem[]

  @@index([transaction_id])
  @@index([type])
  @@map("transaction_charges")
}

model Vault {
  id                String           @id @default(uuid()) @db.Uuid
  name              String
  organisation_id   String           @db.Uuid
  organisation      Organisation     @relation(fields: [organisation_id], references: [id])
  currency_id       String?          @db.Uuid
  currency          Currency?        @relation(fields: [currency_id], references: [id])
  balance           Decimal?         @db.Decimal(22, 9)
  locked_balance    Decimal?         @db.Decimal(22, 9)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  tills             Till[]
  gl_transactions   GLTransaction[]
  gl_accounts       GlAccount[]
  balance_histories BalanceHistory[]
  created_by        String?          @db.Uuid
  created_by_user   User?            @relation(fields: [created_by], references: [id])

  @@index([created_at])
  @@index([updated_at])
  @@index([organisation_id])
  @@index([currency_id])
  @@map("vaults")
}

enum GlAccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

model GlAccount {
  id              String        @id @default(uuid()) @db.Uuid
  name            String
  type            GlAccountType
  balance         Decimal?      @db.Decimal(22, 9)
  currency_id     String?       @db.Uuid
  currency        Currency?     @relation(fields: [currency_id], references: [id])
  locked_balance  Decimal?      @db.Decimal(22, 9)
  max_balance     Decimal?      @db.Decimal(22, 9)
  min_balance     Decimal?      @db.Decimal(22, 9)
  closed_at       DateTime?     @db.Timestamp(0)
  close_reason    String?       @db.VarChar(256)
  frozen_at       DateTime?     @db.Timestamp(0)
  frozen_reason   String?       @db.VarChar(256)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  opened_by       String?       @db.Uuid
  opened_by_user  User?         @relation(fields: [opened_by], references: [id])
  organisation_id String?       @db.Uuid
  organisation    Organisation? @relation(fields: [organisation_id], references: [id])
  bank_account_id String?       @db.Uuid
  bank_account    BankAccount?  @relation(fields: [bank_account_id], references: [id])
  charge_id       String?       @db.Uuid
  charge          Charge?       @relation(fields: [charge_id], references: [id])
  vault_id        String?       @db.Uuid
  vault           Vault?        @relation(fields: [vault_id], references: [id])
  till_id         String?       @db.Uuid
  till            Till?         @relation(fields: [till_id], references: [id])
  org_balance_id  String?       @db.Uuid
  org_balance     OrgBalance?   @relation(fields: [org_balance_id], references: [id])
  gl_entries      GlEntry[]

  @@index([created_at])
  @@index([updated_at])
  @@index([currency_id])
  @@index([type])
  @@map("gl_accounts")
}

enum GLTransactionType {
  VAULT_WITHDRAWAL
  VAULT_DEPOSIT
  TILL_OPEN
  TILL_CLOSE
  TILL_TOPUP
  TILL_WITHDRAWAL
  OUTBOUND_TRANSACTION
  OUTBOUND_TRANSACTION_REVERSAL
  INBOUND_TRANSACTION
  INBOUND_TRANSACTION_REVERSAL
}

enum GLTransactionStatus {
  PENDING
  APPROVED
  POSTED
  FAILED
}

model GLTransaction {
  id                 String              @id @default(uuid()) @db.Uuid
  transaction_type   GLTransactionType   @map("transaction_type") // e.g., "vault_withdrawal", "till_topup", "outbound_transaction", "inbound_transaction"
  status             GLTransactionStatus @map("status") // e.g., "pending", "approved", "posted", "failed"
  amount             Decimal             @map("amount") // Total transaction amount
  currency_id        String?             @db.Uuid
  currency           Currency?           @relation(fields: [currency_id], references: [id])
  description        String              @map("description") // e.g., "Outbound Transaction completed for customer XYZ, partner ABC"
  vault_id           String?             @db.Uuid
  vault              Vault?              @relation(fields: [vault_id], references: [id])
  user_till_id       String?             @db.Uuid
  user_till          UserTill?           @relation(fields: [user_till_id], references: [id])
  organisation_id    String?             @db.Uuid
  organisation       Organisation?       @relation(fields: [organisation_id], references: [id])
  customer_id        String?             @db.Uuid
  customer           Customer?           @relation(fields: [customer_id], references: [id])
  transaction_id     String?             @db.Uuid
  transaction        Transaction?        @relation(fields: [transaction_id], references: [id])
  gl_entries         GlEntry[] // Linked GL entries
  created_at         DateTime            @default(now()) @map("created_at")
  updated_at         DateTime            @updatedAt @map("updated_at")
  created_by         String?             @db.Uuid
  created_by_user    User?               @relation(fields: [created_by], references: [id])
  balance_history_id String?             @db.Uuid
  balance_history    BalanceHistory?     @relation(fields: [balance_history_id], references: [id])

  @@map("gl_transactions")
}

enum DrCr {
  DR
  CR
}

model GlEntry {
  id                String           @id @default(uuid()) @db.Uuid
  gl_account_id     String           @db.Uuid
  gl_account        GlAccount        @relation(fields: [gl_account_id], references: [id])
  gl_transaction_id String           @db.Uuid
  gl_transaction    GLTransaction    @relation(fields: [gl_transaction_id], references: [id])
  amount            Decimal          @db.Decimal(22, 9)
  dr_cr             DrCr
  description       String
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  created_by        String?          @db.Uuid
  created_by_user   User?            @relation(fields: [created_by], references: [id])
  balance_histories BalanceHistory[]

  @@index([gl_account_id])
  @@index([gl_transaction_id])
  @@index([created_by])
  @@index([dr_cr])
  @@map("gl_entries")
}

model OrgBalance {
  id                String           @id @default(uuid()) @db.Uuid
  base_org_id       String           @db.Uuid
  base_org          Organisation     @relation("BaseOrgBalance", fields: [base_org_id], references: [id])
  dest_org_id       String           @db.Uuid
  dest_org          Organisation     @relation("DestOrgBalance", fields: [dest_org_id], references: [id])
  currency_id       String           @db.Uuid
  currency          Currency         @relation(fields: [currency_id], references: [id])
  balance           Decimal          @db.Decimal(22, 9)
  locked_balance    Decimal?         @db.Decimal(22, 9)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  balance_histories BalanceHistory[]
  created_by        String?          @db.Uuid
  created_by_user   User?            @relation(fields: [created_by], references: [id])
  gl_accounts       GlAccount[]

  @@index([base_org_id])
  @@index([dest_org_id])
  @@index([currency_id])
  @@map("org_balances")
}

enum BalanceHistoryType {
  ORG_BALANCE
  TILL
  VAULT
  BANK_ACCOUNT
}

model BalanceHistory {
  id              String             @id @default(uuid()) @db.Uuid
  entity_type     BalanceHistoryType
  entity_id       String             @db.Uuid
  currency_id     String             @db.Uuid
  currency        Currency           @relation(fields: [currency_id], references: [id])
  old_balance     Decimal?           @db.Decimal(22, 9)
  new_balance     Decimal            @db.Decimal(22, 9)
  change_amount   Decimal            @db.Decimal(22, 9)
  transaction_id  String?            @db.Uuid
  transaction     Transaction?       @relation(fields: [transaction_id], references: [id])
  created_at      DateTime           @default(now())
  created_by      String?            @db.Uuid
  created_by_user User?              @relation(fields: [created_by], references: [id])
  gl_entry_id     String?            @db.Uuid
  gl_entry        GlEntry?           @relation(fields: [gl_entry_id], references: [id])
  org_balance     OrgBalance?        @relation(fields: [org_balance_id], references: [id])
  org_balance_id  String?            @db.Uuid
  till            Till?              @relation(fields: [till_id], references: [id])
  till_id         String?            @db.Uuid
  vault           Vault?             @relation(fields: [vault_id], references: [id])
  vault_id        String?            @db.Uuid
  bank_account    BankAccount?       @relation(fields: [bank_account_id], references: [id])
  bank_account_id String?            @db.Uuid
  gl_transactions GLTransaction[]
  description     String?            @db.VarChar(256)

  @@index([entity_type, entity_id])
  @@index([currency_id])
  @@index([transaction_id])
  @@index([gl_entry_id])
  @@map("balance_histories")
}

model BankAccount {
  id                String           @id @default(uuid()) @db.Uuid
  name              String // e.g., "Bank X USD Account"
  account_number    String           @db.VarChar(50)
  bank_name         String           @db.VarChar(100)
  swift_code        String?          @db.VarChar(11)
  currency_id       String           @db.Uuid
  currency          Currency         @relation(fields: [currency_id], references: [id])
  balance           Decimal          @db.Decimal(22, 9)
  locked_balance    Decimal?         @db.Decimal(22, 9)
  organisation_id   String?          @db.Uuid
  organisation      Organisation?    @relation(fields: [organisation_id], references: [id])
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  created_by        String?          @db.Uuid
  created_by_user   User?            @relation(fields: [created_by], references: [id])
  balance_histories BalanceHistory[]
  gl_accounts       GlAccount[]

  @@index([currency_id])
  @@index([organisation_id])
  @@map("bank_accounts")
}

enum PartyRole {
  SENDER
  RECEIVER
}

model TransactionParty {
  id                         String              @id @default(uuid()) @db.Uuid
  transaction_id             String              @db.Uuid
  transaction                Transaction         @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  role                       PartyRole // SENDER or RECEIVER
  name                       String // Full name (required for compliance/payout)
  id_type                    IndividualIDType? // e.g., PASSPORT, NATIONAL_ID (for sender; optional for receiver)
  id_number                  String? // ID number (for sender verification)
  nationality_id             String?             @db.Uuid
  nationality                Country?            @relation(fields: [nationality_id], references: [id], onDelete: SetNull)
  payout_method_channel_id   String?             @db.Uuid
  payout_method_channel      TransactionChannel? @relation(fields: [payout_method_channel_id], references: [id], onDelete: SetNull)
  payout_bank_name           String? // For RECEIVER: Bank name
  payout_bank_account_number String? // For RECEIVER: Bank account number
  payout_bank_account_name   String? // For RECEIVER: Bank account name
  payout_phone               String? // For RECEIVER: Phone number
  metadata                   Json? // Optional extras: {"phone": "123-456-7890", "address": "123 Main St", "email": "example@email.com"}
  created_at                 DateTime            @default(now())
  updated_at                 DateTime            @updatedAt
  organisation_id            String              @db.Uuid
  organisation               Organisation        @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  created_by                 String?             @db.Uuid
  created_by_user            User?               @relation(fields: [created_by], references: [id])
  sender_transactions        Transaction[]       @relation("SenderTransactionParty")
  receiver_transactions      Transaction[]       @relation("ReceiverTransactionParty")

  @@unique([transaction_id, role]) // One sender and one receiver per transaction
  @@index([transaction_id])
  @@index([role])
  @@index([nationality_id])
  @@index([organisation_id])
  @@map("transaction_parties")
}

enum ChargesPaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model ChargesPayment {
  id                    String               @id @default(uuid()) @db.Uuid
  type                  ChargeType // Matches charge_type from charges table
  internal_total_amount Decimal              @db.Decimal(22, 9) // Aggregated internal share (e.g., your org's $3)
  external_total_amount Decimal              @db.Decimal(22, 9) // Aggregated external share (e.g., partner's $2)
  reference_number      String               @unique // e.g., "PAY-2025-09-01-COMMISSION-ORGX"
  date_completed        DateTime             @db.Timestamp(0) // When the batch was marked paid
  currency_id           String               @db.Uuid
  currency              Currency             @relation(fields: [currency_id], references: [id])
  destination_org_id    String?              @db.Uuid // Partner org (e.g., Org X)
  destination_org       Organisation?        @relation("DestinationOrganisation", fields: [destination_org_id], references: [id], onDelete: SetNull)
  status                ChargesPaymentStatus @default(PENDING) // e.g., "COMPLETED", "FAILED", "PENDING_REVIEW"
  notes                 String? // Optional notes (e.g., "Monthly settlement")
  created_at            DateTime             @default(now())
  updated_at            DateTime             @updatedAt
  created_by            String?              @db.Uuid
  created_by_user       User?                @relation(fields: [created_by], references: [id])
  organisation_id       String               @db.Uuid // Your org (multi-tenant)
  organisation          Organisation         @relation("Organisation", fields: [organisation_id], references: [id], onDelete: Cascade)
  payment_items         ChargesPaymentItem[] // Junction to settled transaction_charges

  @@index([type])
  @@index([currency_id])
  @@index([destination_org_id])
  @@index([date_completed])
  @@index([organisation_id])
  @@index([reference_number])
  @@map("charges_payments")
}

model ChargesPaymentItem {
  id                      String            @id @default(uuid()) @db.Uuid
  charges_payment_id      String            @db.Uuid
  charges_payment         ChargesPayment    @relation(fields: [charges_payment_id], references: [id], onDelete: Cascade)
  transaction_charges_id  String            @db.Uuid
  transaction_charges     TransactionCharge @relation(fields: [transaction_charges_id], references: [id], onDelete: Cascade)
  internal_amount_settled Decimal           @db.Decimal(22, 9) // Portion of internal_amount marked paid in this batch
  external_amount_settled Decimal           @db.Decimal(22, 9) // Portion of external_amount marked paid
  created_at              DateTime          @default(now())

  @@unique([charges_payment_id, transaction_charges_id]) // One item per transaction_charge per payment
  @@index([charges_payment_id])
  @@index([transaction_charges_id])
  @@map("charges_payment_items")
}

model Parameter {
  id         String   @id @default(uuid()) @db.Uuid
  name       String
  value      String
  value_2    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([name])
  @@map("parameters")
}
