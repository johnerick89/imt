// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

model User {
  id                      String         @id @default(uuid()) @db.Uuid
  email                   String         @unique
  password                String
  created_at              DateTime       @default(now())
  updated_at              DateTime       @updatedAt
  first_name              String
  last_name               String
  role                    String
  avatar                  String?
  status                  UserStatus     @default(PENDING)
  phone                   String?
  address                 String?
  organisation_id         String?        @db.Uuid
  organisation            Organisation?  @relation("UserOrganisation", fields: [organisation_id], references: [id])
  last_login              DateTime?
  created_by              String?        @db.Uuid
  countries_created       Country[]
  organisation_created    Organisation[] @relation("CreatedByUser")
  Integration             Integration[]
  UserActivity            UserActivity[]
  role_id                 String?        @db.Uuid
  user_role               Role?          @relation("UserRole", fields: [role_id], references: [id])
  created_by_roles        Role[]         @relation("RolesCreatedByUser")
  branch                  Branch?        @relation(fields: [branch_id], references: [id])
  branch_id               String?        @db.Uuid
  created_exchange_rates  ExchangeRate[] @relation("CreatedByUser")
  approved_exchange_rates ExchangeRate[] @relation("ApprovedByUser")
  till                    Till[]
  transactions            Transaction[]
  corridors               Corridor[]
  charges                 Charge[]
  beneficiaries           Beneficiary[]
  customers               Customer[]
  branches                Branch[]       @relation("CreatedByUser")

  @@index([email])
  @@index([id])
  @@index([first_name])
  @@index([last_name])
  @@index([role])
  @@index([status])
  @@index([last_login])
  @@index([created_at])
  @@index([updated_at])
  @@index([avatar])
  @@index([password])
  @@index([created_by])
  @@index([role_id])
  @@map("users")
}

model Currency {
  id                    String         @id @default(uuid()) @db.Uuid
  currency_name         String
  currency_code         String
  currency_symbol       String
  created_at            DateTime       @default(now())
  created_by            String?        @db.Uuid
  updated_at            DateTime       @updatedAt
  symbol_native         String?
  decimal_digits        Int?
  rounding              Float?
  name_plural           String?
  organisations         Organisation[]
  charges               Charge[]
  corridors             Corridor[]     @relation("BaseCurrency")
  Customer              Customer[]
  inbound_transactions  Transaction[]  @relation("OriginCurrency")
  outbound_transactions Transaction[]  @relation("DestCurrency")
  from_exchange_rates   ExchangeRate[] @relation("FromCurrency")
  to_exchange_rates     ExchangeRate[] @relation("ToCurrency")

  @@index([currency_name])
  @@index([currency_code])
  @@index([currency_symbol])
  @@index([created_at])
  @@index([updated_at])
  @@map("currencies")
}

model Country {
  id                         String         @id @default(uuid()) @db.Uuid
  name                       String
  code                       String
  created_at                 DateTime       @default(now())
  updated_at                 DateTime       @updatedAt
  organisations              Organisation[]
  created_by                 String?        @db.Uuid
  created_by_user            User?          @relation(fields: [created_by], references: [id])
  base_corridors             Corridor[]     @relation("BaseCountry")
  destination_corridors      Corridor[]     @relation("DestinationCountry")
  customers_nationality      Customer[]     @relation("CustomerNationality")
  customers_residence        Customer[]     @relation("CustomerResidenceCountry")
  customers_incorporation    Customer[]     @relation("IncorporationCountry")
  beneficiaries_nationality  Beneficiary[]  @relation("BeneficiaryNationality")
  beneficiaries_residence    Beneficiary[]  @relation("BeneficiaryResidenceCountry")
  incorporation_country      Beneficiary[]  @relation("BeneficiaryIncorporationCountry")
  origin_exchange_rates      ExchangeRate[] @relation("OriginCountry")
  destination_exchange_rates ExchangeRate[] @relation("DestinationCountry")
  branches                   Branch[]

  @@index([name])
  @@index([code])
  @@index([created_at])
  @@index([updated_at])
  @@map("countries")
}

enum OrganisationType {
  PARTNER
  AGENCY
  CUSTOMER
}

enum IntegrationMethod {
  INTERNAL
  EXTERNAL
}

enum OrganisationStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

model Organisation {
  id                       String             @id @default(uuid()) @db.Uuid
  name                     String
  description              String?
  type                     OrganisationType   @default(PARTNER)
  integration_mode         IntegrationMethod  @default(INTERNAL)
  contact_person           String?
  contact_email            String?
  contact_phone            String?
  contact_address          String?
  contact_city             String?
  contact_state            String?
  contact_zip              String?
  status                   OrganisationStatus @default(PENDING)
  base_currency_id         String?            @db.Uuid
  base_currency            Currency?          @relation(fields: [base_currency_id], references: [id])
  created_at               DateTime           @default(now())
  updated_at               DateTime           @updatedAt
  users                    User[]             @relation("UserOrganisation")
  country_id               String?            @db.Uuid
  country                  Country?           @relation(fields: [country_id], references: [id])
  created_by               String?            @db.Uuid
  created_by_user          User?              @relation("CreatedByUser", fields: [created_by], references: [id])
  integrations             Integration[]
  user_activities          UserActivity[]
  branches                 Branch[]
  origin_charges           Charge[]           @relation("OriginOrganisation")
  destination_charges      Charge[]           @relation("DestinationOrganisation")
  customers                Customer[]
  beneficiaries            Beneficiary[]
  origin_transactions      Transaction[]      @relation("OriginOrganisation")
  destination_transactions Transaction[]      @relation("DestinationOrganisation")
  ExchangeRate             ExchangeRate[]
  Corridor                 Corridor[]

  @@index([name])
  @@index([id])
  @@index([description])
  @@index([created_at])
  @@index([updated_at])
  @@index([type])
  @@map("organisations")
}

enum IntegrationType {
  API
  WEBHOOK
  EMAIL
  SMS
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

model Integration {
  id              String            @id @default(uuid()) @db.Uuid
  name            String
  description     String?
  organisation_id String?           @db.Uuid
  organisation    Organisation?     @relation(fields: [organisation_id], references: [id])
  type            IntegrationType
  status          IntegrationStatus
  api_key         String?
  api_secret      String?
  endpoint_url    String?
  webhook_secret  String?
  configuration   Json?
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  created_by      String?           @db.Uuid
  created_by_user User?             @relation(fields: [created_by], references: [id])
  Transaction     Transaction[]

  @@index([name])
  @@index([organisation_id])
  @@index([description])
  @@index([type])
  @@index([status])
  @@index([created_at])
  @@index([updated_at])
  @@index([created_by])
  @@map("integrations")
}

model UserActivity {
  id              String        @id @default(uuid()) @db.Uuid
  user_id         String?       @db.Uuid
  user            User?         @relation(fields: [user_id], references: [id])
  entity_type     String
  entity_id       String
  action          String
  data            Json?
  organisation_id String?       @db.Uuid
  organisation    Organisation? @relation(fields: [organisation_id], references: [id])
  changes         Json?
  ip_address      String?
  request_id      String?
  metadata        Json?
  created_at      DateTime      @default(now())

  @@index([user_id])
  @@index([entity_type])
  @@index([entity_id])
  @@index([action])
  @@index([organisation_id])
  @@index([created_at])
  @@map("user_activities")
}

model Role {
  id               String           @id @default(uuid()) @db.Uuid
  name             String
  description      String?
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  created_by       String?          @db.Uuid
  created_by_user  User?            @relation("RolesCreatedByUser", fields: [created_by], references: [id])
  users            User[]           @relation("UserRole")
  role_permissions RolePermission[]

  @@index([name])
  @@index([created_at])
  @@index([updated_at])
  @@index([created_by])
  @@map("roles")
}

model Permission {
  id               String           @id @default(uuid()) @db.Uuid
  name             String
  created_at       DateTime         @default(now())
  created_by       String?          @db.Uuid
  role_permissions RolePermission[]
  updated_at       DateTime         @updatedAt
  description      String?

  @@unique([name])
  @@index([name])
  @@map("permissions")
}

model RolePermission {
  id            String     @id @default(uuid()) @db.Uuid
  role_id       String     @db.Uuid
  permission_id String     @db.Uuid
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  updated_at    DateTime   @updatedAt
  created_at    DateTime   @default(now())
  created_by    String?    @db.Uuid

  @@unique([role_id, permission_id])
  @@index([role_id])
  @@index([permission_id])
  @@map("role_permissions")
}

model Branch {
  id              String       @id @default(uuid()) @db.Uuid
  name            String
  address         String?
  city            String?
  state           String?
  country_id      String       @db.Uuid
  country         Country      @relation(fields: [country_id], references: [id])
  zip_code        String?
  phone           String?
  email           String?
  created_at      DateTime     @default(now())
  created_by      String?      @db.Uuid
  created_by_user User?        @relation("CreatedByUser", fields: [created_by], references: [id])
  organisation_id String       @db.Uuid
  organisation    Organisation @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  users           User[]
  updated_at      DateTime     @updatedAt
  customers       Customer[]

  @@unique([name, organisation_id])
  @@index([name])
  @@index([organisation_id])
  @@map("branches")
}

model TransactionChannel {
  id                       String        @id @default(uuid()) @db.Uuid
  name                     String
  description              String
  direction                String[]
  created_at               DateTime      @default(now())
  created_by               String?       @db.Uuid
  updated_at               DateTime      @updatedAt
  origin_transactions      Transaction[] @relation("OriginChannel")
  destination_transactions Transaction[] @relation("DestChannel")
}

enum CorridorStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

model Corridor {
  id                     String         @id @default(uuid()) @db.Uuid
  name                   String
  description            String
  base_country_id        String         @db.Uuid
  base_country           Country        @relation("BaseCountry", fields: [base_country_id], references: [id])
  destination_country_id String         @db.Uuid
  destination_country    Country        @relation("DestinationCountry", fields: [destination_country_id], references: [id])
  base_currency_id       String         @db.Uuid
  base_currency          Currency       @relation("BaseCurrency", fields: [base_currency_id], references: [id])
  organisation_id        String         @db.Uuid
  organisation           Organisation   @relation(fields: [organisation_id], references: [id])
  created_at             DateTime       @default(now())
  created_by             String?        @db.Uuid
  created_by_user        User?          @relation(fields: [created_by], references: [id])
  updated_at             DateTime       @updatedAt
  status                 CorridorStatus @default(ACTIVE)
  Transaction            Transaction[]

  @@index([name])
  @@index([base_country_id])
  @@index([destination_country_id])
  @@index([base_currency_id])
  @@index([status])
  @@map("corridors")
}

enum ApplicationMethod {
  PERCENTAGE
  FIXED
}

enum ChargeType {
  TAX
  INTERNAL_FEE
  COMMISSION
  OTHER
}

enum ApplicableDirection {
  OUTBOUND
  INBOUND
  BOTH
}

enum ChargeStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

model Charge {
  id                           String              @id @default(uuid()) @db.Uuid
  name                         String
  description                  String
  application_method           ApplicationMethod   @default(PERCENTAGE)
  currency_id                  String?             @db.Uuid
  currency                     Currency?           @relation(fields: [currency_id], references: [id])
  type                         ChargeType
  rate                         Float
  origin_organisation_id       String?             @db.Uuid
  origin_organisation          Organisation?       @relation("OriginOrganisation", fields: [origin_organisation_id], references: [id])
  destination_organisation_id  String?             @db.Uuid
  destination_organisation     Organisation?       @relation("DestinationOrganisation", fields: [destination_organisation_id], references: [id])
  is_reversible                Boolean             @default(false)
  direction                    ApplicableDirection @default(OUTBOUND)
  origin_share_percentage      Float?
  destination_share_percentage Float?
  created_at                   DateTime            @default(now())
  created_by                   String?             @db.Uuid
  created_by_user              User?               @relation(fields: [created_by], references: [id])
  updated_at                   DateTime            @updatedAt
  status                       ChargeStatus        @default(ACTIVE)
  min_amount                   Float?
  max_amount                   Float?

  @@index([name])
  @@index([currency_id])
  @@index([origin_organisation_id])
  @@index([destination_organisation_id])
  @@index([status])
  @@index([created_at])
  @@index([updated_at])
  @@map("charges")
}

enum TaxNumberType {
  PIN // Personal Identification Number
  TIN // Tax Identification Number
  SSN // Social Security Number
  KRA_PIN // Kenya Revenue Authority Personal Identification Number
  OTHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum CustomerType {
  INDIVIDUAL
  CORPORATE
  BUSINESS
}

enum IndividualIDType {
  PASSPORT
  NATIONAL_ID
  DRIVERS_LICENSE
  ALIEN_CARD
  KRA_PIN
  OTHER
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

model Customer {
  id                       String            @id @default(uuid()) @db.Uuid
  full_name                String
  date_of_birth            DateTime?
  nationality_id           String?           @db.Uuid
  nationality              Country?          @relation("CustomerNationality", fields: [nationality_id], references: [id], onDelete: SetNull)
  residence_country_id     String?           @db.Uuid
  residence_country        Country?          @relation("CustomerResidenceCountry", fields: [residence_country_id], references: [id], onDelete: SetNull)
  id_type                  IndividualIDType?
  id_number                String? // Passport or National ID
  address                  String?
  email                    String?
  phone_number             String?
  occupation_id            String?           @db.Uuid
  occupation               Occupation?       @relation(fields: [occupation_id], references: [id], onDelete: SetNull)
  registration_date        DateTime          @default(now())
  risk_rating              Float             @default(0.0)
  risk_reasons             String? // Brief explanation of risk factors
  organisation_id          String            @db.Uuid
  organisation             Organisation      @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  branch_id                String?           @db.Uuid
  branch                   Branch?           @relation(fields: [branch_id], references: [id], onDelete: Cascade)
  created_at               DateTime          @default(now())
  updated_at               DateTime          @updatedAt
  tax_number_type          TaxNumberType?
  tax_number               String?
  gender                   Gender?
  customer_type            CustomerType
  incorporation_country_id String?           @db.Uuid
  incorporation_country    Country?          @relation("IncorporationCountry", fields: [incorporation_country_id], references: [id], onDelete: SetNull)
  incoporated_date         DateTime?
  estimated_monthly_income Decimal?
  org_reg_number           String?
  current_age              Int?
  first_name               String?
  last_name                String?
  currency_id              String?           @db.Uuid
  currency                 Currency?         @relation(fields: [currency_id], references: [id], onDelete: SetNull)
  industry_id              String?           @db.Uuid
  industry                 Industry?         @relation(fields: [industry_id], references: [id], onDelete: SetNull)
  legacy_customer_id       String? // For syncing with legacy systems
  has_adverse_media        Boolean?          @default(false) // Indicates if the customer has been flagged in adverse media
  adverse_media_reason     String? // Reason for adverse media flag
  deleted_at               DateTime? // Soft delete field
  beneficiaries            Beneficiary[]
  transactions             Transaction[]     @relation("Customer")
  created_by               String?           @db.Uuid
  created_by_user          User?             @relation(fields: [created_by], references: [id])
  status                   CustomerStatus    @default(PENDING)

  @@unique([id_type, id_number, organisation_id])
  @@index([full_name])
  @@index([id_type, id_number])
  @@index([nationality_id])
  @@index([residence_country_id])
  @@index([email])
  @@index([phone_number])
  @@index([occupation_id])
  @@index([registration_date])
  @@index([risk_rating])
  @@index([organisation_id])
  @@index([branch_id])
  @@index([tax_number_type])
  @@index([tax_number])
  @@index([gender])
  @@index([customer_type])
  @@index([incorporation_country_id])
  @@index([incoporated_date])
  @@index([status])
  @@map("customers")
}

model Occupation {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  description String?
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  customers   Customer[]
  Beneficiary Beneficiary[]
}

model Industry {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  description String?
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  customers   Customer[]
  Beneficiary Beneficiary[]
}

enum OwnershipType {
  DIRECT
  INDIRECT
  CONTROL
  OTHER
}

enum RelationshipType {
  OWNER
  SHAREHOLDER
  DIRECTOR
  TRUSTEE
  PARTNER
  BENEFICIARY
  NOMINEE
  OTHER
}

model Beneficiary {
  id                        String            @id @default(uuid()) @db.Uuid
  customer_id               String            @db.Uuid
  customer                  Customer          @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  organisation_id           String            @db.Uuid
  organisation              Organisation      @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  type                      CustomerType
  risk_contribution         Float? // Weighted risk score (e.g., risk_score * ownership_percentage)
  risk_contribution_details Json? // Details of contribution (e.g., {"sanctions": 12.5, "id_verification": 4})
  name                      String
  date_of_birth             DateTime?
  nationality_id            String?           @db.Uuid
  nationality               Country?          @relation("BeneficiaryNationality", fields: [nationality_id], references: [id], onDelete: SetNull)
  residence_country_id      String?           @db.Uuid
  residence_country         Country?          @relation("BeneficiaryResidenceCountry", fields: [residence_country_id], references: [id], onDelete: SetNull)
  incorporation_country_id  String?           @db.Uuid
  incorporation_country     Country?          @relation("BeneficiaryIncorporationCountry", fields: [incorporation_country_id], references: [id], onDelete: SetNull)
  address                   String?
  id_type                   IndividualIDType?
  id_number                 String?
  tax_number_type           TaxNumberType?
  tax_number                String?
  reg_number                String?
  occupation_id             String?           @db.Uuid
  occupation                Occupation?       @relation(fields: [occupation_id], references: [id], onDelete: SetNull)
  industry_id               String?           @db.Uuid
  industry                  Industry?         @relation(fields: [industry_id], references: [id], onDelete: SetNull)
  created_at                DateTime          @default(now())
  updated_at                DateTime          @updatedAt
  deleted_at                DateTime?
  transactions              Transaction[]     @relation("Beneficiary")
  created_by                String?           @db.Uuid
  created_by_user           User?             @relation(fields: [created_by], references: [id])

  @@unique([customer_id, organisation_id])
  @@index([customer_id])
  @@index([organisation_id])
  @@index([deleted_at])
  @@index([name])
  @@index([id_type, id_number])
  @@index([nationality_id])
  @@index([residence_country_id])
  @@index([tax_number_type])
  @@index([tax_number])
  @@index([reg_number])
  @@index([occupation_id])
  @@index([industry_id])
  @@map("beneficiaries")
}

enum ExchangeRateStatus {
  PENDING_APPROVAL
  APPROVED
  ACTIVE
  INACTIVE
  REJECTED
}

enum ExchangeRateOperatorStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
}

model ExchangeRate {
  id                      BigInt                     @id @default(autoincrement())
  name                    String?                    @db.VarChar(256)
  from_currency_id        String?                    @db.Uuid
  from_currency           Currency?                  @relation("FromCurrency", fields: [from_currency_id], references: [id])
  to_currency_id          String?                    @db.Uuid
  to_currency             Currency?                  @relation("ToCurrency", fields: [to_currency_id], references: [id])
  origin_country_id       String?                    @db.Uuid
  origin_country          Country?                   @relation("OriginCountry", fields: [origin_country_id], references: [id])
  destination_country_id  String?                    @db.Uuid
  destination_country     Country?                   @relation("DestinationCountry", fields: [destination_country_id], references: [id])
  buy_rate                Decimal                    @db.Decimal(18, 9)
  sell_rate               Decimal                    @db.Decimal(18, 9)
  exchange_rate           Decimal                    @db.Decimal(18, 9)
  min_buy_rate            Decimal?                   @db.Decimal(18, 9)
  max_buy_rate            Decimal?                   @db.Decimal(18, 9)
  min_sell_rate           Decimal?                   @db.Decimal(18, 9)
  max_sell_rate           Decimal?                   @db.Decimal(18, 9)
  min_exchange_rate       Decimal?                   @db.Decimal(18, 9)
  max_exchange_rate       Decimal?                   @db.Decimal(18, 9)
  status                  ExchangeRateStatus         @default(PENDING_APPROVAL)
  operator_status         ExchangeRateOperatorStatus @default(PENDING_APPROVAL)
  approved_by             String?                    @db.Uuid
  approved_by_user        User?                      @relation("ApprovedByUser", fields: [approved_by], references: [id])
  created_by              String?                    @db.Uuid
  created_by_user         User?                      @relation("CreatedByUser", fields: [created_by], references: [id])
  organisation_id         String?                    @db.Uuid
  organisation            Organisation?              @relation(fields: [organisation_id], references: [id])
  created_at              DateTime?                  @db.Timestamp(0)
  updated_at              DateTime?                  @db.Timestamp(0)
  deleted_at              DateTime?                  @db.Timestamp(0)
  internal_exchange_rates Transaction[]              @relation("InternalExchangeRates")
  external_exchange_rates Transaction[]              @relation("ExternalExchangeRates")

  @@index([from_currency_id])
  @@index([to_currency_id])
  @@index([origin_country_id])
  @@index([destination_country_id])
  @@index([approved_by])
  @@index([created_by])
  @@index([organisation_id])
  @@map("exchange_rates")
}

enum TillStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

model Till {
  id                     String        @id @default(uuid()) @db.Uuid
  name                   String
  description            String
  status                 TillStatus    @default(ACTIVE)
  current_teller_user_id String?       @db.Uuid
  current_teller_user    User?         @relation(fields: [current_teller_user_id], references: [id])
  opened_at              DateTime?
  closed_at              DateTime?
  created_at             DateTime      @default(now())
  updated_at             DateTime      @updatedAt
  Transaction            Transaction[]
}

enum Direction {
  INBOUND
  OUTBOUND
}

enum Status {
  PENDING_APPROVAL
  APPROVED
  PENDING
  FAILED
  CANCELLED
  REJECTED
  COMPLETED
  REVERSED
}

enum RemittanceStatus {
  PENDING
  FAILED
  REJECTED
  COMPLETED
}

enum RequestStatus {
  UNDER_REVIEW
  PENDING_OPERATIONS_APPROVAL
  PENDING_CUSTOMER_ACTION
  PENDING_VERIFICATION
}

model Transaction {
  id                          String              @id @default(uuid()) @db.Uuid
  transaction_no              String?             @db.VarChar(128)
  corridor_id                 String              @db.Uuid
  corridor                    Corridor?           @relation(fields: [corridor_id], references: [id])
  till_id                     String              @db.Uuid
  till                        Till?               @relation(fields: [till_id], references: [id])
  direction                   Direction
  customer_id                 String              @db.Uuid
  customer                    Customer?           @relation("Customer", fields: [customer_id], references: [id])
  origin_amount               Decimal             @db.Decimal(22, 9)
  origin_channel_id           String              @db.Uuid
  origin_channel              TransactionChannel? @relation("OriginChannel", fields: [origin_channel_id], references: [id])
  origin_currency_id          String              @db.Uuid
  origin_currency             Currency            @relation("OriginCurrency", fields: [origin_currency_id], references: [id])
  beneficiary_id              String              @db.Uuid
  beneficiary                 Beneficiary?        @relation("Beneficiary", fields: [beneficiary_id], references: [id])
  dest_amount                 Decimal             @db.Decimal(22, 9)
  dest_channel_id             String              @db.Uuid
  dest_channel                TransactionChannel? @relation("DestChannel", fields: [dest_channel_id], references: [id])
  dest_currency_id            String              @db.Uuid
  dest_currency               Currency            @relation("DestCurrency", fields: [dest_currency_id], references: [id])
  rate                        Decimal             @db.Decimal(22, 9)
  internal_exchange_rate      Decimal?            @db.Decimal(18, 9)
  inflation                   Decimal?            @db.Decimal(18, 9)
  markup                      Decimal?            @db.Decimal(18, 9)
  purpose                     String?             @db.VarChar(256)
  funds_source                String?             @db.VarChar(256)
  relationship                String?             @db.VarChar(256)
  remarks                     String?             @db.VarChar(1024)
  status                      Status              @default(PENDING_APPROVAL)
  remittance_status           RemittanceStatus    @default(PENDING)
  remittance_status_details   String?             @db.VarChar(1024)
  request_status              RequestStatus       @default(UNDER_REVIEW)
  remitted_at                 DateTime?
  exchange_rate_id            BigInt?
  exchange_rate               ExchangeRate?       @relation("InternalExchangeRates", fields: [exchange_rate_id], references: [id])
  external_exchange_rate_id   BigInt?
  external_exchange_rate      ExchangeRate?       @relation("ExternalExchangeRates", fields: [external_exchange_rate_id], references: [id])
  created_by                  String              @db.Uuid
  created_by_user             User?               @relation(fields: [created_by], references: [id])
  created_at                  DateTime?           @default(now())
  updated_at                  DateTime?           @updatedAt
  deleted_at                  DateTime?
  received_at                 DateTime?
  amount_payable              Decimal?            @db.Decimal(22, 9)
  amount_receivable           Decimal?            @db.Decimal(22, 9)
  origin_organisation_id      String?             @db.Uuid
  origin_organisation         Organisation?       @relation("OriginOrganisation", fields: [origin_organisation_id], references: [id])
  destination_organisation_id String?             @db.Uuid
  destination_organisation    Organisation?       @relation("DestinationOrganisation", fields: [destination_organisation_id], references: [id])
  integration_id              String?             @db.Uuid
  integration                 Integration?        @relation(fields: [integration_id], references: [id])
  total_taxes                 Decimal?            @db.Decimal(22, 9) // Sum of all taxes
  internal_charges            Decimal?            @db.Decimal(22, 9) // Internal profit charges
  commissions                 Decimal?            @db.Decimal(22, 9) // Commissions to partners/agencies
  reversal_status             String? // e.g., "reversed", "partial_reversal" for refunds
  reversal_date               DateTime? // Timestamp for reversal
  charges                     TransactionCharge[]

  @@index([corridor_id])
  @@index([till_id])
  @@index([origin_channel_id])
  @@index([origin_currency_id])
  @@index([beneficiary_id])
  @@index([customer_id])
  @@index([dest_channel_id])
  @@index([dest_currency_id])
  @@index([exchange_rate_id])
  @@index([external_exchange_rate_id])
  @@index([created_by])
  @@index([origin_organisation_id])
  @@index([destination_organisation_id])
  @@index([integration_id])
  @@index([status])
  @@index([remittance_status])
  @@index([request_status])
  @@index([created_at])
  @@index([updated_at])
  @@index([deleted_at])
  @@index([received_at])
  @@index([remitted_at])
  @@index([reversal_date])
  @@map("transactions")
}

enum TransactionChargeStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  PAID
  REVERSED
}

model TransactionCharge {
  id             String                  @id @default(uuid()) @db.Uuid
  transaction_id String                  @db.Uuid
  transaction    Transaction             @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  type           ChargeType
  amount         Decimal                 @db.Decimal(22, 9)
  rate           Decimal?                @db.Decimal(18, 9) // Percentage rate if applicable
  is_reversible  Boolean                 @default(true) // Taxes are not reversible
  description    String?                 @db.VarChar(256)
  created_at     DateTime                @default(now())
  updated_at     DateTime                @updatedAt
  status         TransactionChargeStatus @default(PENDING)

  @@index([transaction_id])
  @@index([type])
  @@map("transaction_charges")
}
